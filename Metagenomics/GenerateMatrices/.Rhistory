cols <- col(table, as.factor = TRUE)
matrix <- as.matrix(table, rownames = cols)
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table, rownames = cols)
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table, rownames(cols))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table, rownames(cols, do.NULL = TRUE, prefix = "row"))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
print(cols)
matrix <- as.matrix(table, rownames(cols, do.NULL = TRUE, prefix = "row"))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
print(cols)
matrix <- as.matrix(table, rownames(cols, do.NULL = TRUE))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
print(cols)
matrix <- as.matrix(table, rownames(cols, do.NULL = FALSE))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
print(cols)
matrix <- as.matrix(table, rownames(cols))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- c(colnames(table))
print(cols)
matrix <- as.matrix(table, rownames(cols))
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
print(cols)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
geom_text(aes(fill = co$value, label = round(co$value, 2))) + # write the values
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
geom_text(aes(fill = co$value, label = round(co$value, 2))) + # write the values
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
}
}
View(co)
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
plot <- ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
plot
}
}
View(plot)
View(plot)
View(plot)
View(plot)
library(ggsave)
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
library(ggplot2)
library(reshape)
library(stringr)
path <- "C:/Users/megha/go/src/GenerateMatrices"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(Var1, Var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "darkred",
mid = "white",
high = "midnightblue",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Correlation Plot") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggcorrplot(co, outline.color = "white", type = "lower", ggtheme = ggplot2::theme_gray, method = "circle") +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
library(ggcorrplot)
library(reshape)
library(stringr)
path <- "C:/Users/megha/go/src/GenerateMatrices"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggcorrplot(co, outline.color = "white", type = "lower", ggtheme = ggplot2::theme_gray, method = "circle") +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
library(ggcorrplot)
library(reshape)
library(stringr)
library(ggplot2)
path <- "C:/Users/megha/go/src/GenerateMatrices"
files <-list.files(normalizePath(path), pattern="txt")
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggcorrplot(co, outline.color = "white", type = "lower", ggtheme = ggplot2::theme_gray, method = "circle") +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggcorrplot(cor(co), outline.color = "white", type = "lower", ggtheme = ggplot2::theme_gray, method = "circle") +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggcorrplot(cor(matrix), outline.color = "white", type = "lower", ggtheme = ggplot2::theme_gray, method = "circle") +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
for (file in files) {
if (grepl("Jaccard", file, fixed = TRUE) | grepl("Bray-Curtis", file, fixed = TRUE)) {
table <- read.table(file.path(path, file), sep="\t", header=TRUE)
cols <- colnames(table)
matrix <- as.matrix(table)
rownames(matrix) <- cols
co=melt(matrix)
head(co)
ggplot(co, aes(X1, X2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = value)) + # background colours are mapped according to the value column
scale_fill_gradient2(low = "#6D9EC1",
mid = "white",
high = "#E46726",
midpoint = 0.5, limit= c(0,1.0)) +
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Distance Heat Map") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="")
imageFilename <- str_replace(file, "txt", "png")
ggsave(imageFilename)
}
}
